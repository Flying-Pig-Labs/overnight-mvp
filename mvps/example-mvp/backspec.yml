name: Task Tracker MVP Backend
architecture: Serverless (Lambda + DynamoDB + API Gateway)
runtime: Node.js 20.x
database:
  type: DynamoDB
  tables:
    - name: Tasks
      partition_key: userId
      sort_key: taskId
      attributes:
        - "title: string"
        - "description: string"
        - "completed: boolean"
        - "priority: string"
        - "dueDate: string"
        - "categoryId: string"
        - "createdAt: timestamp"
        - "updatedAt: timestamp"
      indexes:
        - name: CategoryIndex
          partition_key: categoryId
          sort_key: createdAt
    - name: Categorys
      partition_key: userId
      sort_key: categoryId
      attributes:
        - "name: string"
        - "color: string"
        - "icon: string"
        - "createdAt: timestamp"
      indexes: []
lambdas:
  - name: CreateTaskManagement
    handler: handlers/taskmanagement.createTaskManagement
    method: POST
    path: /tasks
    description: Create a new task
    environment:
      TABLE_NAME: TaskManagements
  - name: ListTaskManagements
    handler: handlers/taskmanagement.listTaskManagements
    method: GET
    path: /tasks
    description: List all tasks with optional filtering
    environment:
      TABLE_NAME: TaskManagements
  - name: GetTaskManagement
    handler: handlers/taskmanagement.getTaskManagement
    method: GET
    path: /tasks/{id}
    description: Get a specific task
    environment:
      TABLE_NAME: TaskManagements
  - name: UpdateTaskManagement
    handler: handlers/taskmanagement.updateTaskManagement
    method: PUT
    path: /tasks/{id}
    description: Update a task
    environment:
      TABLE_NAME: TaskManagements
  - name: DeleteTaskManagement
    handler: handlers/taskmanagement.deleteTaskManagement
    method: DELETE
    path: /tasks/{id}
    description: Delete a task
    environment:
      TABLE_NAME: TaskManagements
  - name: ListTaskCategoriess
    handler: handlers/taskcategories.listTaskCategoriess
    method: GET
    path: /categories
    description: List all categories
    environment:
      TABLE_NAME: TaskCategoriess
  - name: CreateTaskCategories
    handler: handlers/taskcategories.createTaskCategories
    method: POST
    path: /categories
    description: Create a new category
    environment:
      TABLE_NAME: TaskCategoriess
  - name: UpdateTaskCategories
    handler: handlers/taskcategories.updateTaskCategories
    method: PUT
    path: /categories/{id}
    description: Update a category
    environment:
      TABLE_NAME: TaskCategoriess
  - name: DeleteTaskCategories
    handler: handlers/taskcategories.deleteTaskCategories
    method: DELETE
    path: /categories/{id}
    description: Delete a category
    environment:
      TABLE_NAME: TaskCategoriess
api_gateway:
  type: REST
  cors: true
  authorization: API Key
  throttling:
    rate_limit: 1000
    burst_limit: 2000
infrastructure:
  iac: AWS SAM
  monitoring: CloudWatch
  tracing: X-Ray
