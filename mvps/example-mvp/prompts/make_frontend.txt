# Context

You are a senior AI application engineer using Lovable to build a complete, production-ready application frontend.

Below this prompt is a full specification file called `mvpspec.yml` that serves as your Knowledge Base and single source of truth. It contains the project's overview, features, API endpoints, data models, UI requirements, and technical constraints.

## Task

Build the complete frontend application described in `mvpspec.yml` from scratch in Lovable, with all API calls properly stubbed for a backend that doesn't exist yet.

### Guidelines

**Tech Stack Requirements:**
- Frontend Framework: React + TypeScript (strict mode)
- Styling: Tailwind CSS + shadcn/ui components
- State Management: Use appropriate solution (Zustand/Context API)
- Build Tool: Vite
- API Client: Axios or Fetch API

**Backend Architecture (Already Decided):**
- The backend will be AWS Lambda + DynamoDB + API Gateway
- Do NOT suggest alternative backend architectures
- Do NOT implement any backend code
- Focus exclusively on the frontend implementation

**Development Approach:**
1. Start by parsing the `mvpspec.yml` and summarizing the application
2. Scaffold the base layout and navigation structure
3. Create all pages and routes based on UI requirements
4. Implement components progressively from layout → containers → features
5. Wire up all API calls with proper error handling
6. Ensure mobile-first, responsive design throughout

#### Constraints

**API Implementation Requirements:**
- Make REAL HTTP calls to placeholder endpoints (e.g., `http://localhost:3001/api/...`)
- All API calls will initially fail with 404 errors - this is expected
- When any API call fails, show a toast/notification bubble with: "API not implemented yet: [Action Name]"
- Use a toast library (react-hot-toast or similar) for notifications
- Handle errors gracefully without breaking the UI flow
- Structure request payloads exactly as the backend will expect them
- Include proper headers (Content-Type, etc.)
- Show loading states during API calls

**Example API Implementation:**
```typescript
const createTask = async (taskData: TaskData) => {
  try {
    setLoading(true);
    const response = await axios.post('http://localhost:3001/api/tasks', taskData);
    return response.data;
  } catch (error) {
    toast.error('API not implemented yet: Creating task');
    // Optionally return mock data to keep UI functional
    return { id: 'mock-id', ...taskData };
  } finally {
    setLoading(false);
  }
};
```

**Strict Requirements:**
- Do NOT invent features not in the specification
- Do NOT modify field names, endpoints, or data types
- Do NOT implement authentication unless specified
- Do NOT create backend code or serverless functions
- Maintain clean separation of concerns
- Follow the exact URL patterns from the spec

# Instructions

1. First, parse and understand the complete `mvpspec.yml` below
2. Create a clear mental model of the application's structure
3. Build the frontend systematically, starting with layout and navigation
4. Implement all features with proper API stubs as described above
5. Ensure the UI is polished, responsive, and production-ready

## Design Specifications

**Visual Design Requirements:**
- **Style**: Minimal & Clean
- **Color Palette**: blue primary with neutral grays
- **Target Audience**: Productivity-focused individuals
- **Brand Personality**: clean and professional
- **User Emotions**: focused, accomplished, organized

**Interaction Design:**
- Smooth animations and transitions on all interactions
- Rich micro-interactions (hover effects, loading states, transitions)
- **Interface Complexity**: balanced
- Error states should be friendly and helpful
- Success states should be celebratory but professional

## MVP Specification

```yaml
name: Task Tracker MVP
description: A simple task tracking application for personal productivity
features:
  - name: Task Management
    description: Create, read, update, and delete tasks
    endpoints:
      - method: POST
        path: /tasks
        description: Create a new task
      - method: GET
        path: /tasks
        description: List all tasks with optional filtering
      - method: GET
        path: /tasks/{id}
        description: Get a specific task
      - method: PUT
        path: /tasks/{id}
        description: Update a task
      - method: DELETE
        path: /tasks/{id}
        description: Delete a task
  - name: Task Categories
    description: Organize tasks by categories
    endpoints:
      - method: GET
        path: /categories
        description: List all categories
      - method: POST
        path: /categories
        description: Create a new category
      - method: PUT
        path: /categories/{id}
        description: Update a category
      - method: DELETE
        path: /categories/{id}
        description: Delete a category
data_model:
  task:
    - "id: string"
    - "title: string"
    - "description: string"
    - "completed: boolean"
    - "priority: string"
    - "dueDate: string"
    - "categoryId: string"
    - "createdAt: timestamp"
    - "updatedAt: timestamp"
  category:
    - "id: string"
    - "name: string"
    - "color: string"
    - "icon: string"
    - "createdAt: timestamp"
ui_requirements:
  - Task list view with filtering and sorting
  - Task creation and editing forms
  - Category management interface
  - Dashboard with task statistics
  - Responsive design for mobile and desktop
  - Dark mode support
technical_requirements:
  - React frontend with TypeScript
  - Serverless backend on AWS
  - Real-time updates
  - Offline capability
  - Export tasks to CSV

```